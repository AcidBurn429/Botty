{"version":3,"sources":["BotState.ts","serviceWorker.ts","index.tsx","urlArgs.ts","App.tsx"],"names":["useChatBotState","useState","state","rawSetState","newState","key","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","getUrlVars","vars","href","replace","m","value","decodeURI","createWebsiteURLWithData","data","encodeURI","Profile","props","style","color","name","age","url","setState","args","dangerouslySetInnerHTML","__html","steps","id","trigger","component","options","label","user","previousValue","validator","input","parseInt","isNaN","a","Math","random","b","eval","backgroundColor","width","minHeight","display","flexDirection","flex","justifyContent","alignSelf","textAlign","fontWeight","fontSize"],"mappings":"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","file":"static/js/main.c43290c3.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nexport interface ChatBotState {\n  name?: string;\n  url?: string;\n  age?: number;\n}\n\nexport function useChatBotState() {\n  const [state, rawSetState] = useState<ChatBotState>({});\n\n  /**\n   * Chatbot has no internal state, so we need to create our own and \n   * keep the captured object up-to-date.\n   */\n  const setState = (newState: ChatBotState) => {\n    rawSetState(newState);\n    // set new values\n    for (const key in newState) {\n      state[key as keyof ChatBotState] = newState[key as keyof ChatBotState] as any;\n    }\n    // unset deleted values\n    for (const key in state) {\n      if (!(key in newState)) {\n        state[key as keyof ChatBotState] = undefined;\n      }\n    }\n  };\n\n  return [state, setState] as const;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport function getUrlVars() {\n  var vars: {[key: string]: string} = {};\n  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n      vars[key] = decodeURI(value);\n      return \"\";\n  });\n  return vars;\n}\n\nexport function createWebsiteURLWithData(key: string, data: string) {\n  return encodeURI(window.location.href + `/?${key}=${data}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChatBot from \"react-simple-chatbot\";\nimport { MessageArgs } from './chatbot-types';\nimport Editor from 'react-simple-code-editor';\nimport { getUrlVars, createWebsiteURLWithData } from './urlArgs';\nimport { ChatBotState, useChatBotState } from './BotState';\n\nfunction Profile(props: {state: ChatBotState}) {\n  return <p style={{color: \"black\"}}>\n    <b>Name:</b> {props.state.name || \"Unbekannt\"} <br/>\n    <b>Alter:</b> {props.state.age || \"Unbekannt\"} <br/>\n    <b>Deine seite:</b> {props.state.url ? <a href={props.state.url}>link</a> : \"Keine\"} \n  </p>\n}\n\nfunction App() {\n  const [state, setState] = useChatBotState();\n\n  // display custom site if site argument passed to url\n  const args = getUrlVars();\n  if (args[\"site\"]) {\n    return <div\n    dangerouslySetInnerHTML={{\n      __html: args[\"site\"]\n    }}></div>\n  }\n\n  const steps = [\n    {\n      id: \"start\",\n      message: `Moin, was möchtest du machen?`,\n      trigger: \"select\",\n    },\n    {\n      id: \"profile\",\n      component: <Profile state={state} />,\n      trigger: \"start\",\n    },\n    {\n      id: \"select\",\n      options: [\n        { value: 1, label: 'Namen ändern', trigger: 'update-name' },\n        { value: 2, label: 'Alter angeben', trigger: 'update-age' },\n        { value: 3, label: 'Programmieren', trigger: 'code-start' },\n        { value: 4, label: 'Website erstellen', trigger: 'create-website' },\n        { value: 5, label: 'Mein Profil', trigger: 'profile' },\n      ],\n    },\n    {\n      id: \"update-name\",\n      message: \"Okay, wie heißt du?\",\n      trigger: \"enter-name\"\n    },\n    {\n      id: \"enter-name\",\n      user: true,\n      trigger: \"set-name\"\n    },\n    {\n      id: 'set-name',\n      message: (args: MessageArgs) => {\n        setState({...state, name: args.previousValue});\n        return `Moin ${args.previousValue}!`\n      } ,\n      trigger: \"start\",\n    },\n    {\n      id: \"update-age\",\n      message: \"Wie alt bist du?\",\n      trigger: \"enter-age\",\n    },\n    {\n      id: 'enter-age',\n      user: true,\n      validator: (input: string) => {\n        const value = parseInt(input);\n        if (isNaN(value)) {\n          return 'Bitte gib eine Zahl ein.';\n        } else if (value < 10 || value >= 100) {\n          return `${value}? Komm schon.`;\n        }\n        return true;\n      },\n      trigger: 'set-age',\n    },\n    {\n      id: 'set-age',\n      message: (args: MessageArgs) => {\n        setState({...state, age: parseInt(args.previousValue)});\n        return `Du bist also ${parseInt(args.previousValue)}.`\n      } ,\n      trigger: \"start\",\n    },\n    {\n      id: 'code-start',\n      message: \"Ok, dann schreibe mal eine JavaScript funktion die zwei Zahlen addiert.\",\n      trigger: \"enter-code\"\n    },\n    {\n      id: 'enter-code',\n      trigger: \"finish-code\",\n      user: true,\n      validator: (input: string) => { \n        try {\n          const a = Math.random(), b=Math.random();\n          if (eval(input)(a,b) === a+b) {\n            return true;\n          } else {\n            return \"Das hat leider nicht geklappt. :(\"\n          }\n        } catch (error) {\n          return error;\n        }\n      }\n    },\n    {\n      id: \"finish-code\",\n      message: \"Herzlichen Glückwunsch! Du bist jetzt ein Programmierer!\",\n      trigger: \"start\"\n    },\n    {\n      id: \"create-website\",\n      message: \"Cool! Dann gib mal deinen HTML code ein.\",\n      trigger: \"enter-website\"\n    },\n    {\n      id: 'enter-website',\n      trigger: \"finish-website\",\n      user: true,\n    },\n    {\n      id: \"finish-website\",\n      message: (args: MessageArgs) => {\n        setState({...state, url: createWebsiteURLWithData(\"site\", args.previousValue)});\n        return \"Super! Deine Website ist jetzt im Link unten!\";\n      },\n      trigger: \"profile\"\n    },\n  ];\n  \n// `Hier ist deine Website: ${createWebsiteURLWithData(\"site\",args.previousValue)}`\n\n  return (\n    <div style={{backgroundColor: \"gray\", width: \"100%\", minHeight: \"100vh\", display: \"flex\", flexDirection: \"column\"}}>\n      <div style={{display: \"flex\", flex: 1, flexDirection: \"column\", justifyContent: \"center\", alignSelf: \"center\"}}>\n        <div style={{flex: 1}}/>\n        <p style={{textAlign: \"center\", fontWeight: \"bold\", color: \"white\", fontSize: 25}}>\n          Chatbot test\n        </p>\n        <div>\n          <ChatBot steps={steps} />\n        </div>\n        <div style={{flex: 1}}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}