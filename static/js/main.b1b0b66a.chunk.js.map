{"version":3,"sources":["serviceWorker.ts","index.tsx","urlArgs.ts","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","getUrlVars","vars","href","replace","m","key","value","decodeURI","createWebsiteURLWithData","data","encodeURI","Profile","props","style","color","name","age","url","useState","setName","setAge","setURL","args","dangerouslySetInnerHTML","__html","steps","id","trigger","options","label","user","previousValue","validator","input","parseInt","isNaN","a","Math","random","b","eval","backgroundColor","width","minHeight","display","flexDirection","flex","justifyContent","alignSelf","textAlign","fontWeight","fontSize"],"mappings":"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","file":"static/js/main.b1b0b66a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nexport function getUrlVars() {\n  var vars: {[key: string]: string} = {};\n  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m,key,value) {\n      vars[key] = decodeURI(value);\n      return \"\";\n  });\n  return vars;\n}\n\nexport function createWebsiteURLWithData(key: string, data: string) {\n  return encodeURI(window.location.href + `/?${key}=${data}`);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport ChatBot from \"react-simple-chatbot\";\nimport { MessageArgs } from './chatbot-types';\nimport Editor from 'react-simple-code-editor';\nimport { getUrlVars, createWebsiteURLWithData } from './urlArgs';\n\nfunction Profile(props: {name?: string, age?: number, url?: string}) {\n  return <p style={{color: \"white\"}}>\n    <b>Name:</b> {props.name || \"Unbekannt\"} <br/>\n    <b>Alter:</b> {props.age || \"Unbekannt\"} <br/>\n    <b>Deine seite:</b> {props.url ? <a href={props.url}>{props.url}</a> : \"Keine\"} \n  </p>\n}\n\nfunction App() {\n  const [name, setName] = useState<string | undefined>();\n  const [age, setAge] = useState<number | undefined>();\n  const [url, setURL] = useState<string | undefined>();\n\n  const args = getUrlVars();\n  if (args[\"site\"]) {\n    return <div\n    dangerouslySetInnerHTML={{\n      __html: args[\"site\"]\n    }}></div>\n  }\n\n  const steps = [\n    {\n      id: \"start\",\n      message: `Moin, was möchtest du machen?`,\n      trigger: \"select\",\n    },\n    {\n      id: \"select\",\n      options: [\n        { value: 1, label: 'Namen ändern', trigger: 'update-name' },\n        { value: 2, label: 'Alter angeben', trigger: 'update-age' },\n        { value: 3, label: 'Programmieren', trigger: 'code-start' },\n        { value: 4, label: 'Website erstellen', trigger: 'create-website' },\n      ],\n    },\n    {\n      id: \"update-name\",\n      message: \"Okay, wie heißt du?\",\n      trigger: \"enter-name\"\n    },\n    {\n      id: \"enter-name\",\n      user: true,\n      trigger: \"set-name\"\n    },\n    {\n      id: 'set-name',\n      message: (args: MessageArgs) => {\n        setName(args.previousValue);\n        return `Moin ${args.previousValue}!`\n      } ,\n      trigger: \"start\",\n    },\n    {\n      id: \"update-age\",\n      message: \"Wie alt bist du?\",\n      trigger: \"enter-age\",\n    },\n    {\n      id: 'enter-age',\n      user: true,\n      validator: (input: string) => {\n        const value = parseInt(input);\n        if (isNaN(value)) {\n          return 'Bitte gib eine Zahl ein.';\n        } else if (value < 10 || value >= 100) {\n          return `${value}? Komm schon.`;\n        }\n        return true;\n      },\n      trigger: 'set-age',\n    },\n    {\n      id: 'set-age',\n      message: (args: MessageArgs) => {\n        setAge(parseInt(args.previousValue));\n        return `Du bist also ${parseInt(args.previousValue)}.`\n      } ,\n      trigger: \"start\",\n    },\n    {\n      id: 'code-start',\n      message: \"Ok, dann schreibe mal eine JavaScript funktion die zwei Zahlen addiert.\",\n      trigger: \"enter-code\"\n    },\n    {\n      id: 'enter-code',\n      trigger: \"finish-code\",\n      user: true,\n      validator: (input: string) => { \n        try {\n          const a = Math.random(), b=Math.random();\n          if (eval(input)(a,b) === a+b) {\n            return true;\n          } else {\n            return \"Das hat leider nicht geklappt. :(\"\n          }\n        } catch (error) {\n          return error;\n        }\n      }\n    },\n    {\n      id: \"finish-code\",\n      message: \"Herzlichen Glückwunsch! Du bist jetzt ein Programmierer!\",\n      trigger: \"start\"\n    },\n    {\n      id: \"create-website\",\n      message: \"Cool! Dann gib mal deinen HTML code ein.\",\n      trigger: \"enter-website\"\n    },\n    {\n      id: 'enter-website',\n      trigger: \"finish-website\",\n      user: true,\n    },\n    {\n      id: \"finish-website\",\n      message: (args: MessageArgs) => {\n        setURL(createWebsiteURLWithData(\"site\", args.previousValue));\n        return \"Super! Deine Website ist jetzt im Link unten!\";\n      },\n      trigger: \"start\"\n    },\n  ];\n  \n// `Hier ist deine Website: ${createWebsiteURLWithData(\"site\",args.previousValue)}`\n\n  return (\n    <div style={{backgroundColor: \"gray\", width: \"100%\", minHeight: \"100vh\", display: \"flex\", flexDirection: \"column\"}}>\n      <div style={{display: \"flex\", flex: 1, flexDirection: \"column\", justifyContent: \"center\", alignSelf: \"center\"}}>\n        <div style={{flex: 1}}/>\n        <p style={{textAlign: \"center\", fontWeight: \"bold\", color: \"white\", fontSize: 25}}>\n          Chatbot test\n        </p>\n        <div>\n          <ChatBot steps={steps} />\n          <Profile name={name} age={age} url={url} />\n        </div>\n        <div style={{flex: 1}}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}