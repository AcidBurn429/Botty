{"version":3,"sources":["Chat.tsx","Profile.tsx","state/profile.ts","state/index.ts","App.tsx","serviceWorker.ts","index.tsx","urlArgs.ts"],"names":["ProgrammingChatBot","dispatch","useDispatch","steps","id","message","trigger","component","options","value","label","user","args","type","previousValue","validator","input","parseInt","isNaN","a","Math","random","b","eval","error","createWebsiteURLWithData","style","backgroundColor","width","minHeight","display","flexDirection","flex","justifyContent","alignSelf","textAlign","fontWeight","color","fontSize","Profile","name","useSelector","state","profile","age","url","href","defaultProfileState","undefined","chatBotReducer","combineReducers","action","App","getUrlVars","dangerouslySetInnerHTML","__html","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","vars","replace","m","key","decodeURI","data","encodeURI"],"mappings":"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","file":"static/js/main.d11f1194.chunk.js","sourcesContent":["import React, { Dispatch } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { MessageArgs } from './chatbot-types';\nimport { getUrlVars, createWebsiteURLWithData } from './urlArgs';\nimport { useDispatch } from 'react-redux';\nimport { ChatBotAction } from './state/action';\nimport { Profile } from './Profile';\n\nexport function ProgrammingChatBot() {\n  const dispatch = useDispatch<Dispatch<ChatBotAction>>();\n\n  const steps = [\n    {\n      id: 'start',\n      message: `Moin, was möchtest du machen?`,\n      trigger: 'select',\n    },\n    {\n      id: 'profile',\n      component: <Profile />,\n      trigger: 'start',\n    },\n    {\n      id: 'select',\n      options: [\n        { value: 1, label: 'Namen ändern', trigger: 'update-name' },\n        { value: 2, label: 'Alter angeben', trigger: 'update-age' },\n        { value: 3, label: 'Programmieren', trigger: 'code-start' },\n        { value: 4, label: 'Website erstellen', trigger: 'create-website' },\n        { value: 5, label: 'Mein Profil', trigger: 'profile' },\n      ],\n    },\n    {\n      id: 'update-name',\n      message: 'Okay, wie heißt du?',\n      trigger: 'enter-name',\n    },\n    {\n      id: 'enter-name',\n      user: true,\n      trigger: 'set-name',\n    },\n    {\n      id: 'set-name',\n      message: (args: MessageArgs) => {\n        dispatch({ type: 'setName', value: args.previousValue });\n        return `Moin ${args.previousValue}!`;\n      },\n      trigger: 'start',\n    },\n    {\n      id: 'update-age',\n      message: 'Wie alt bist du?',\n      trigger: 'enter-age',\n    },\n    {\n      id: 'enter-age',\n      user: true,\n      validator: (input: string) => {\n        const value = parseInt(input);\n        if (isNaN(value)) {\n          return 'Bitte gib eine Zahl ein.';\n        } else if (value < 10 || value >= 100) {\n          return `${value}? Komm schon.`;\n        }\n        return true;\n      },\n      trigger: 'set-age',\n    },\n    {\n      id: 'set-age',\n      message: (args: MessageArgs) => {\n        dispatch({ type: 'setAge', value: parseInt(args.previousValue) });\n        return `Du bist also ${parseInt(args.previousValue)}.`;\n      },\n      trigger: 'start',\n    },\n    {\n      id: 'code-start',\n      message:\n        'Ok, dann schreibe mal eine JavaScript funktion die zwei Zahlen addiert.',\n      trigger: 'enter-code',\n    },\n    {\n      id: 'enter-code',\n      trigger: 'finish-code',\n      user: true,\n      validator: (input: string) => {\n        try {\n          const a = Math.random(),\n            b = Math.random();\n          if (eval(input)(a, b) === a + b) {\n            return true;\n          } else {\n            return 'Das hat leider nicht geklappt. :(';\n          }\n        } catch (error) {\n          return error;\n        }\n      },\n    },\n    {\n      id: 'finish-code',\n      message: 'Herzlichen Glückwunsch! Du bist jetzt ein Programmierer!',\n      trigger: 'start',\n    },\n    {\n      id: 'create-website',\n      message: 'Cool! Dann gib mal deinen HTML code ein.',\n      trigger: 'enter-website',\n    },\n    {\n      id: 'enter-website',\n      trigger: 'finish-website',\n      user: true,\n    },\n    {\n      id: 'finish-website',\n      message: (args: MessageArgs) => {\n        dispatch({\n          type: 'setURL',\n          value: createWebsiteURLWithData('site', args.previousValue),\n        });\n        return 'Super! Deine Website ist jetzt im Link unten!';\n      },\n      trigger: 'profile',\n    },\n  ];\n  // `Hier ist deine Website: ${createWebsiteURLWithData(\"site\",args.previousValue)}`\n  return (\n    <div\n      style={{\n        backgroundColor: 'gray',\n        width: '100%',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignSelf: 'center',\n        }}\n      >\n        <div style={{ flex: 1 }} />\n        <p\n          style={{\n            textAlign: 'center',\n            fontWeight: 'bold',\n            color: 'white',\n            fontSize: 25,\n          }}\n        >\n          Saphira\n        </p>\n        <div>\n          <ChatBot steps={steps} />\n        </div>\n        <div style={{ flex: 1 }} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ChatBotState } from './state';\n\nexport function Profile() {\n  const name = useSelector<ChatBotState>((state) => state.profile.name);\n  const age = useSelector<ChatBotState>((state) => state.profile.age);\n  const url = useSelector<ChatBotState>((state) => state.profile.url);\n  return (\n    <p style={{ color: 'black' }}>\n      <b>Name:</b> {name || 'Unbekannt'} <br />\n      <b>Alter:</b> {age || 'Unbekannt'} <br />\n      <b>Deine seite:</b> {url ? <a href={url as string}>link</a> : 'Keine'}\n    </p>\n  );\n}\n","import { ChatBotAction } from './action';\n\nconst defaultProfileState = {\n  name: undefined as undefined | string,\n  age: undefined as undefined | number,\n  url: undefined as undefined | string,\n};\n\nexport function profileReducer(\n  state = defaultProfileState,\n  action: ChatBotAction\n) {\n  switch (action.type) {\n    case 'setAge':\n      state = { ...state, age: action.value };\n      break;\n    case 'setName':\n      state = { ...state, name: action.value };\n      break;\n    case 'setURL':\n      state = { ...state, url: action.value };\n      break;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport { profileReducer } from './profile';\n\nexport const chatBotReducer = combineReducers({\n  profile: profileReducer,\n});\n\nexport type ChatBotState = NonNullable<Parameters<typeof chatBotReducer>[0]>;\n","import React from 'react';\nimport './App.css';\nimport { ProgrammingChatBot } from './Chat';\nimport { getUrlVars } from './urlArgs';\nimport { createStore } from 'redux';\nimport { chatBotReducer } from './state';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  // display custom site if site argument passed to url\n  const args = getUrlVars();\n  if (args['site']) {\n    return (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: args['site'],\n        }}\n      />\n    );\n  }\n\n  const store = createStore(chatBotReducer);\n\n  return (\n    <Provider store={store}>\n      <ProgrammingChatBot />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export function getUrlVars() {\n  var vars: { [key: string]: string } = {};\n  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (\n    m,\n    key,\n    value\n  ) {\n    vars[key] = decodeURI(value);\n    return '';\n  });\n  return vars;\n}\n\nexport function createWebsiteURLWithData(key: string, data: string) {\n  return encodeURI(window.location.href + `/?${key}=${data}`);\n}\n"],"sourceRoot":""}