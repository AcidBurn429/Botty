{"version":3,"sources":["state/code.ts","CodeBlock.tsx","getXMLErrors.tsx","WebsitePreview.tsx","Chat.tsx","urlArgs.ts","state/profile.ts","state/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultState","body","title","titleColor","undefined","codeFromState","state","current","CodeBlock","props","savedCode","useSelector","code","content","style","fontFamily","backgroundColor","color","padding","borderRadius","Circle","width","height","marginRight","HeaderBar","paddingBottom","display","justifyContent","borderBottom","marginBottom","parseXML","DOMParser","parseFromString","getXMLErrors","xmlDoc","errors","getElementsByTagName","length","result","i","push","key","dangerouslySetInnerHTML","__html","children","innerHTML","WebsitePreview","replace","LinkToWebsite","data","url","encodeURI","window","location","href","ProgrammingChatBot","dispatch","useDispatch","useState","innerHeight","setHeight","React","useEffect","updateHeight","addEventListener","removeEventListener","steps","id","message","trigger","user","args","type","value","previousValue","options","label","delay","component","asMessage","console","log","xml","bodys","getXMLBody","createElement","end","floating","opened","minHeight","flexDirection","flex","alignSelf","textAlign","fontWeight","fontSize","defaultProfileState","name","age","chatBotReducer","combineReducers","profile","action","App","vars","m","decodeURI","getUrlVars","store","createStore","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8RAEMA,EAAe,CACnBC,KAAM,OACNC,MAAO,QACPC,gBAAYC,GAGP,SAASC,EAAcC,GAC5B,IAAIC,EAAU,GASd,OARID,EAAMJ,QACRK,EAAO,aACLD,EAAMH,WAAN,wBAAoCG,EAAMH,WAA1C,MAA2D,GADtD,YAEHG,EAAMJ,MAFH,UAILI,EAAML,OACRM,EAAO,UAAMA,EAAN,aAAkBD,EAAML,OAE3B,WAAN,OAAkBM,EAAlB,WCTK,IAAMC,EAAY,SAACC,GACxB,IAAMC,EAAYC,aAA0B,SAACL,GAAD,OAC1CD,EAAcC,EAAMM,SAEhBA,EAAOH,EAAMI,SAAWH,EAE9B,OACE,yBACEI,MAAO,CACLC,WACE,6EACFC,gBAAiB,UACjBC,MAAO,QACPC,QAAS,GACTC,aAAc,IAGhB,kBAAC,EAAD,MACCP,GAAI,cAKLQ,EAAS,SAACX,GAAD,OACb,yBACEK,MAAO,CACLO,MAAO,GACPC,OAAQ,GACRN,gBAAiBP,EAAMQ,MACvBE,aAAc,GACdI,YAAa,MAKbC,EAAY,kBAChB,oCACE,yBACEV,MAAO,CACLW,cAAe,GACfC,QAAS,OACTC,eAAgB,eAGlB,kBAAC,EAAD,CAAQV,MAAM,QACd,kBAAC,EAAD,CAAQA,MAAM,WACd,kBAAC,EAAD,CAAQA,MAAM,gBAEhB,yBACEH,MAAO,CACLc,aAAc,mBACdC,aAAc,QC1Df,SAASC,EAASlB,GAGvB,OAFe,IAAImB,WACGC,gBAAgBpB,EAAM,YAIvC,SAASqB,EAAaC,GAC3B,IAAMC,EAASD,EAAOE,qBAAqB,eAC3C,GAAID,EAAOE,OAAS,EAElB,IADA,IAAMC,EAAwB,GACrBC,EAAI,EAAGA,EAAIJ,EAAOE,SAAUE,EAOnC,OANAD,EAAOE,KACL,yBACEC,IAAKF,EACLG,wBAAyB,CAAEC,OAAQR,EAAOI,GAAGK,SAAS,GAAGC,cAGtDP,EAGX,GAAIJ,EAAOE,qBAAqB,QAAQC,OAAS,EAC/C,MAAO,+CClBJ,SAASS,IACd,IAAMlC,EAAOD,aAAkC,SAACL,GAAD,OAC7CD,EAAcC,EAAMM,SAEtB,OACE,yBAAK8B,wBAAyB,CAAEC,OAAQ/B,EAAKmC,QAAQ,OAAQ,UCIjE,SAASC,IACP,ICFuCP,EAAaQ,EDE9CrC,EAAOD,aAAkC,SAACL,GAAD,OAC7CD,EAAcC,EAAMM,SAEhBsC,GCLiCT,EDKF,OCLeQ,EDKPrC,ECJtCuC,UAAUC,OAAOC,SAASC,KAAhB,YAA4Bb,EAA5B,YAAmCQ,KDKpD,OAAO,uBAAGK,KAAMJ,GAAT,4CAGF,SAASK,IACd,IAAMC,EAAWC,cADkB,EAEPC,mBAASN,OAAOO,aAFT,mBAE5BrC,EAF4B,KAEpBsC,EAFoB,KAGnCC,IAAMC,WAAU,WACd,SAASC,IACPH,EAAUR,OAAOO,aAGnB,OADAP,OAAOY,iBAAiB,SAAUD,GAC3B,kBAAMX,OAAOa,oBAAoB,SAAUF,OAGpD,IAAMG,EAAQ,CACZ,CACEC,GAAI,QACJC,QAAS,kEACTC,QAAS,kBAEX,CACEF,GAAI,iBACJG,MAAM,EACND,QAAS,aAEX,CACEF,GAAI,YACJC,QAAS,SAACG,GAER,OADAf,EAAS,CAAEgB,KAAM,UAAWC,MAAOF,EAAKG,gBAClC,GAAN,OAAUH,EAAKG,cAAf,+HAEFL,QAAS,gBAEX,CACEF,GAAI,eACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,aAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,cAGxC,CACEF,GAAI,YACJC,QAAS,iDACTC,QAAS,mBAEX,CACEF,GAAI,WACJC,QAAS,sEACTC,QAAS,mBAEX,CACEF,GAAI,kBACJC,QAAS,qEACTC,QAAS,yBACTQ,MAAO,KAET,CACEV,GAAI,yBACJC,QACE,uKACFC,QAAS,yBACTQ,MAAO,KAET,CACEV,GAAI,yBACJC,QACE,sEACFC,QAAS,8BACTQ,MAAO,KAET,CACEV,GAAI,8BACJC,QACE,4IACFC,QAAS,uCACTQ,MAAO,KAET,CACEV,GAAI,uCACJC,QACE,oIACFC,QAAS,mCACTQ,MAAO,KAET,CACEV,GAAI,mCACJE,QAAS,gBACTS,UAAW,kBAAC,EAAD,CAAWjE,QAAO,UAC7BkE,WAAW,EACXF,MAAO,KAET,CACEV,GAAI,gBACJC,QACE,gFACFC,QAAS,kBACTQ,MAAO,KAET,CACEV,GAAI,kBACJG,MAAM,EACND,QAAS,SAAC5D,GAER,OADAuE,QAAQC,IAAIxE,EAAMgE,OACE,UAAhBhE,EAAMgE,MACD,uBAEA,0BAKb,CACEN,GAAI,uBACJC,QAAS,uBACTC,QAAS,0CAEX,CACEF,GAAI,wBACJC,QAAS,mDACTC,QAAS,mBAEX,CACEF,GAAI,yCACJC,QACE,yGACFC,QAAS,8CACTQ,MAAO,KAET,CACEV,GAAI,8CACJE,QAAS,gBACTS,UAAW,kBAAC,EAAD,CAAWjE,QAAO,WAC7BkE,WAAW,GAEb,CACEZ,GAAI,gBACJC,QACE,sJACFC,QAAS,cACTQ,MAAO,KAET,CACEV,GAAI,cACJG,MAAM,EACND,QAAS,SAAC5D,GAER,OADAuE,QAAQC,IAAIxE,EAAMgE,OACE,WAAhBhE,EAAMgE,MACD,mBAEA,sBAKb,CACEN,GAAI,oBACJC,QAAS,kDACTC,QAAS,cACTQ,MAAO,KAET,CACEV,GAAI,mBACJC,QACE,0FACFC,QAAS,0BACTQ,MAAO,KAGT,CACEV,GAAI,0BACJC,QAAS,wCACTC,QAAS,kCAEX,CACEF,GAAI,iCACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,UAAWP,QAAS,qBACvC,CAAEI,MAAO,EAAGG,MAAO,QAAMP,QAAS,uBAGtC,CACEF,GAAI,oBACJC,QAAS,oCACTC,QAAS,6CACTQ,MAAO,KAET,CACEV,GAAI,oBACJC,QACE,6FACFC,QAAS,6CACTQ,MAAO,KAGT,CACEV,GAAI,6CACJC,QAAQ,oHACRC,QAAS,mBAGX,CACEF,GAAI,kBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,cACPP,QAAS,+BAKf,CACEF,GAAI,4BACJC,QAAQ,iFACRC,QAAS,wBACTQ,MAAO,KAET,CACEV,GAAI,wBACJC,QAAQ,iCACRC,QAAS,0BACTQ,MAAO,KAGT,CACEV,GAAI,0BACJE,QAAS,uBACTU,WAAW,EACXD,UACE,kBAAC,EAAD,CACEjE,QAAO,yDAKb,CACEsD,GAAI,uBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,cACPP,QAAS,kCAKf,CACEF,GAAI,+BACJC,QAAQ,+HACRC,QAAS,qBACTQ,MAAO,MAET,CACEV,GAAI,qBACJC,QAAQ,wDACRC,QAAS,qBAEX,CACEF,GAAI,oBACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,iBAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,qBAGxC,CACEF,GAAI,kBACJC,QAAQ,0MACRC,QAAS,gBACTQ,MAAO,KAET,CACEV,GAAI,gBACJC,QAAQ,6EACRC,QAAS,2BACTQ,MAAO,KAGT,CACEV,GAAI,2BACJG,MAAM,EACND,QAAS,SAACE,GACR,IAAMW,EAAMpD,EAASyC,EAAKE,OAC1B,GAAmB,wDAAfF,EAAKE,MACP,MAAO,uCAET,IAAMtC,EAASF,EAAaiD,GACtBjF,EFtRP,SAAoBiC,GACzB,IAAMiD,EAAQjD,EAAOE,qBAAqB,QAC1C,GAAqB,IAAjB+C,EAAM9C,OACR,OAAO8C,EAAM,GEmRIC,CAAWF,GAExB,OAAI/C,EACK,iCAGJlC,GAILuD,EAAS,CAAEgB,KAAM,UAAWC,MAAOxE,EAAK4C,YACjC,oCAJE,kCAOb,CACEsB,GAAI,iCACJW,UAAWjB,IAAMwB,eAAc,SAACd,GAC9B,IAAMpC,EAASF,EAAaH,EAASyC,EAAKG,gBAC1C,OAAO,6BAAMvC,MAEfkC,QAAS,oCAEX,CACEF,GAAI,mCACJC,QAAS,+DACTC,QAAS,4BAEX,CACEF,GAAI,uCACJC,QAAQ,sDACRC,QAAS,oDACTQ,MAAO,KAET,CACEV,GAAI,oDACJC,QAAQ,sCACRC,QAAS,2BACTQ,MAAO,KAET,CACEV,GAAI,wCACJC,QAAQ,yDACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,gCACJC,QAAQ,2GACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,iCACJC,QAAQ,uKACRC,QAAS,0BACTQ,MAAO,KAET,CACEV,GAAI,mCACJC,QAAQ,sEACRC,QAAS,4BAITQ,MAAO,KAET,CACEV,GAAI,4BACJW,UAAW,kBAAChC,EAAD,MACXuB,QAAS,8BACTQ,MAAO,KAET,CACEV,GAAI,8BACJC,QAAQ,kEACRC,QAAS,+BACTQ,MAAO,KAET,CACEV,GAAI,+BACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,KAAMP,QAAS,wBAClC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,4BAIxC,CACEF,GAAI,uBACJC,QAAQ,yHACRC,QAAS,uBACTQ,MAAO,KAET,CACEV,GAAI,yBACJC,QAAQ,6FACRC,QAAS,uBACTQ,MAAO,KAET,CACEV,GAAI,uBACJC,QAAQ,uIACRC,QAAS,4BACTQ,MAAO,KAET,CACEV,GAAI,4BACJC,QAAQ,2HACRC,QAAS,iCACTQ,MAAO,MAGT,CACEV,GAAI,iCACJE,QAAS,0BACTU,WAAW,EACXD,UACE,kBAAC,EAAD,CAAWjE,QAAO,gDAItB,CACEsD,GAAI,0BACJQ,QAAS,CAAC,CAAEF,MAAO,EAAGG,MAAO,cAAeP,QAAS,mBAGvD,CACEF,GAAI,gBACJC,QAAQ,+EACRC,QAAS,wBAGX,CACEF,GAAI,uBACJQ,QAAS,CACP,CAAEF,MAAO,EAAGG,MAAO,SAAUP,QAAS,8BACtC,CAAEI,MAAO,EAAGG,MAAO,SAAUP,QAAS,6BACtC,CAAEI,MAAO,EAAGG,MAAO,OAAQP,QAAS,gCAGxC,CACEF,GAAI,6BACJC,QAAQ,mDACRC,QAAS,wBAGX,CACEF,GAAI,4BACJC,QAAQ,YACRC,QAAS,oCAGX,CACEF,GAAI,mCACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,SACPP,QAAS,uCAEX,CACEI,MAAO,EACPG,MAAO,OACPP,QAAS,wCAIf,CACEF,GAAI,sCACJC,QAAQ,kCACRC,QAAS,4BACTQ,MAAO,KAGT,CACEV,GAAI,qCACJC,QAAS,6BACTC,QAAS,qCAGX,CACEF,GAAI,oCACJG,MAAM,EACND,QAAS,SAACE,GAER,OADAf,EAAS,CAAEgB,KAAM,WAAYC,MAAOF,EAAKE,QAClC,wBAIX,CACEN,GAAI,sBACJC,QAAS,+BACTC,QAAS,yBAGX,CACEF,GAAI,wBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,+BAEX,CACEI,MAAO,EACPG,MAAO,QACPP,QAAS,gCAIf,CACEF,GAAI,8BACJC,QAAQ,kCACRC,QAAS,wBACTQ,MAAO,KAGT,CACEV,GAAI,6BACJC,QAAS,YACTC,QAAS,qBAEX,CACEF,GAAI,oBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,0BAEX,CACEI,MAAO,EACPG,MAAO,UACPP,QAAS,6BAIf,CACEF,GAAI,0BACJC,QAAQ,kCACRC,QAAS,qBAEX,CACEF,GAAI,yBACJE,QAAS,0BACTS,UAAW,kBAAChC,EAAD,OAEb,CACEqB,GAAI,0BACJC,QAAQ,gIACRC,QAAS,sBACTQ,MAAO,KAET,CACEV,GAAI,sBACJC,QACE,qMACFC,QAAS,yBACTQ,MAAO,KAGT,CACEV,GAAI,yBACJC,QAAS,uBACTC,QAAS,4BAGX,CACEF,GAAI,2BACJW,UACE,kBAAC,EAAD,CACEjE,QAAO,yEAGXkE,WAAW,EACXV,QAAS,kCAGX,CACEF,GAAI,iCACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,UACPP,QAAS,kDAKf,CACEF,GAAI,+CACJC,QAAS,mEACTC,QAAS,mCAGX,CACEF,GAAI,kCACJW,UACE,kBAAC,EAAD,CACEjE,QAAO,sHAGXkE,WAAW,EACXV,QAAS,iBAGX,CACEF,GAAI,gBACJC,QACE,0GACFC,QAAS,4BAGX,CACEF,GAAI,2BACJQ,QAAS,CAAC,CAAEF,MAAO,EAAGG,MAAO,cAAeP,QAAS,qBAGvD,CACEF,GAAI,kBACJC,QAAS,uDACTC,QAAS,uBAGX,CACEF,GAAI,sBACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,0BACPP,QAAS,iBAEX,CACEI,MAAO,EACPG,MAAO,0BACPP,QAAS,+BAEX,CACEI,MAAO,EACPG,MAAO,2BACPP,QAAS,iCAKf,CACEF,GAAI,8BACJC,QAAS,mDACTC,QAAS,uBAGX,CACEF,GAAI,gBACJC,QAAS,gDACTC,QAAS,6BAGX,CACEF,GAAI,4BACJQ,QAAS,CACP,CACEF,MAAO,EACPG,MAAO,MACPP,QAAS,WAEP,OADAb,EAAS,CAAEgB,KAAM,gBAAiBC,MAAO,QAClC,+BAGX,CACEA,MAAO,EACPG,MAAO,OACPP,QAAS,WAEP,OADAb,EAAS,CAAEgB,KAAM,gBAAiBC,MAAO,WAClC,+BAGX,CACEA,MAAO,EACPG,MAAO,OACPP,QAAS,WAEP,OADAb,EAAS,CAAEgB,KAAM,gBAAiBC,MAAO,SAClC,iCAUf,CACEN,GAAI,6BACJW,UACE,6BACE,kBAAC,EAAD,MACA,6BACA,kBAAChC,EAAD,OAGJuB,QAAS,gCAGX,CACEF,GAAI,+BACJC,QAAS,uCACTC,QAAS,oBAGX,CACEF,GAAI,mBACJC,QACE,mHACFC,QAAS,uBAGX,CACEF,GAAI,sBACJC,QACE,2HACFC,QAAS,uBAGX,CACEF,GAAI,sBACJW,UACE,kBAAC,EAAD,CACEjE,QAAO,kXAUXwD,QAAS,2BAGX,CACEF,GAAI,0BACJC,QACE,0JACFC,QAAS,gBAOX,CACEF,GAAI,eACJG,MAAM,EACND,QAAS,SAACE,GAER,OADAf,EAAS,CAAEgB,KAAM,UAAWC,MAAOF,EAAKE,QACjC,cAIX,CACEN,GAAI,YACJC,QAAS,6EACTC,QAAS,gBAGX,CACEF,GAAI,eACJC,QAAS,sBACTC,QAAS,mBAEX,CACEF,GAAI,kBACJW,UAAW,kBAAC9B,EAAD,MACXsC,KAAK,IAIT,OAAIhE,GAAU,IACL,kBAAC,IAAD,CAASD,MAAM,OAAO6C,MAAOA,EAAOqB,UAAU,EAAMC,QAAQ,IAInE,yBACE1E,MAAO,CACLE,gBAAiB,OACjBK,MAAO,OACPoE,UAAW,QACX/D,QAAS,OACTgE,cAAe,WAGjB,yBACE5E,MAAO,CACLY,QAAS,OACTiE,KAAM,EACND,cAAe,SACf/D,eAAgB,SAChBiE,UAAW,WAGb,yBAAK9E,MAAO,CAAE6E,KAAM,KACpB,uBACE7E,MAAO,CACL+E,UAAW,SACXC,WAAY,OACZ7E,MAAO,QACP8E,SAAU,KALd,WAUA,6BACE,kBAAC,IAAD,CAAS7B,MAAOA,KAElB,yBAAKpD,MAAO,CAAE6E,KAAM,O,WEjzBtBK,EAAsB,CAC1BC,UAAM7F,EACN8F,SAAK9F,EACL8C,SAAK9C,GCDA,IAAM+F,EAAiBC,YAAgB,CAC5CC,QDGK,WAGJ,IAFD/F,EAEA,uDAFQ0F,EACRM,EACA,uCACA,OAAQA,EAAO9B,MACb,IAAK,SACHlE,EAAK,eAAQA,EAAR,CAAe4F,IAAKI,EAAO7B,QAChC,MACF,IAAK,UACHnE,EAAK,eAAQA,EAAR,CAAe2F,KAAMK,EAAO7B,QACjC,MACF,IAAK,SACHnE,EAAK,eAAQA,EAAR,CAAe4C,IAAKoD,EAAO7B,QAGpC,OAAOnE,GCjBPM,KPeK,WAAmE,IAA9CN,EAA6C,uDAArCN,EAAcsG,EAAuB,uCACvE,OAAQA,EAAO9B,MACb,IAAK,UACHlE,EAAK,eAAQA,EAAR,CAAeL,KAAMqG,EAAO7B,QACjC,MACF,IAAK,WACHnE,EAAK,eAAQA,EAAR,CAAeJ,MAAOoG,EAAO7B,QAClC,MACF,IAAK,gBACHnE,EAAK,eAAQA,EAAR,CAAeH,WAAYmG,EAAO7B,QAG3C,OAAOnE,KQHMiG,MAtBf,WAEE,IAAMhC,EHVD,WACL,IAAIiC,EAAkC,GAStC,OARApD,OAAOC,SAASC,KAAKP,QAAQ,2BAA2B,SACtD0D,EACAhE,EACAgC,GAGA,OADA+B,EAAK/D,GAAOiE,UAAUjC,GACf,MAEF+B,EGAMG,GACb,GAAIpC,EAAI,KACN,OACE,yBACE7B,wBAAyB,CACvBC,OAAQ4B,EAAI,QAMpB,IAAMqC,EAAQC,YAAYV,GAE1B,OACE,kBAAC,IAAD,CAAUS,MAAOA,GACf,kBAACrD,EAAD,QCbcuD,QACW,cAA7B1D,OAAOC,SAAS0D,UAEe,UAA7B3D,OAAOC,SAAS0D,UAEhB3D,OAAOC,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN7C,QAAQ6C,MAAMA,EAAMzD,c","file":"static/js/main.2936c726.chunk.js","sourcesContent":["import { ChatBotAction } from './action';\n\nconst defaultState = {\n  body: 'body' as undefined | string,\n  title: 'title' as undefined | string,\n  titleColor: undefined as undefined | string,\n};\n\nexport function codeFromState(state: typeof defaultState) {\n  let current = '';\n  if (state.title) {\n    current = `<h1${\n      state.titleColor ? ` style=\"color:${state.titleColor};\"` : ''\n    }>${state.title}</h1>`;\n  }\n  if (state.body) {\n    current = `${current}\\n${state.body}`;\n  }\n  return `<body>\\n${current}</body>`;\n}\n\nexport function codeReducer(state = defaultState, action: ChatBotAction) {\n  switch (action.type) {\n    case 'setBody':\n      state = { ...state, body: action.value };\n      break;\n    case 'setTitle':\n      state = { ...state, title: action.value };\n      break;\n    case 'setTitleColor':\n      state = { ...state, titleColor: action.value };\n      break;\n  }\n  return state;\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ChatBotState } from './state';\nimport { codeFromState } from './state/code';\n\n/**\n * If content is provided, display content. Otherwise display the code stored\n * in the redux store\n */\nexport const CodeBlock = (props: { content?: string }) => {\n  const savedCode = useSelector<ChatBotState>((state: ChatBotState) =>\n    codeFromState(state.code)\n  );\n  const code = props.content || savedCode;\n\n  return (\n    <div\n      style={{\n        fontFamily:\n          'Courier New, Courier, Lucida Sans Typewriter, Lucida Typewriter, monospace',\n        backgroundColor: '#4d0000',\n        color: 'white',\n        padding: 10,\n        borderRadius: 5,\n      }}\n    >\n      <HeaderBar />\n      {code || `<NO CODE>`}\n    </div>\n  );\n};\n\nconst Circle = (props: { color: string }) => (\n  <div\n    style={{\n      width: 10,\n      height: 10,\n      backgroundColor: props.color,\n      borderRadius: 50,\n      marginRight: 5,\n    }}\n  />\n);\n\nconst HeaderBar = () => (\n  <>\n    <div\n      style={{\n        paddingBottom: 10,\n        display: 'flex',\n        justifyContent: 'flex-start',\n      }}\n    >\n      <Circle color=\"red\" />\n      <Circle color=\"yellow\" />\n      <Circle color=\"lightgreen\" />\n    </div>\n    <div\n      style={{\n        borderBottom: '0.5px solid grey',\n        marginBottom: 10,\n      }}\n    ></div>\n  </>\n);\n","import React from 'react';\n\nexport function parseXML(code: string) {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(code, 'text/xml');\n  return xmlDoc;\n}\n\nexport function getXMLErrors(xmlDoc: Document) {\n  const errors = xmlDoc.getElementsByTagName('parsererror');\n  if (errors.length > 0) {\n    const result: JSX.Element[] = [];\n    for (let i = 0; i < errors.length; ++i) {\n      result.push(\n        <div\n          key={i}\n          dangerouslySetInnerHTML={{ __html: errors[i].children[1].innerHTML }}\n        />\n      );\n      return result;\n    }\n  }\n  if (xmlDoc.getElementsByTagName('body').length > 1) {\n    return 'Nur ein einziges <body> element ist erlaubt.';\n  }\n}\n\nexport function getXMLBody(xmlDoc: Document) {\n  const bodys = xmlDoc.getElementsByTagName('body');\n  if (bodys.length === 1) {\n    return bodys[0];\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ChatBotState } from './state';\nimport { codeFromState } from './state/code';\n\nexport function WebsitePreview() {\n  const code = useSelector<ChatBotState, string>((state) =>\n    codeFromState(state.code)\n  );\n  return (\n    <div dangerouslySetInnerHTML={{ __html: code.replace('body', 'div') }} />\n  );\n}\n","import React, { Dispatch, useState } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { MessageArgs, TriggerArgs } from './chatbot-types';\nimport { createWebsiteURLWithData } from './urlArgs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ChatBotAction } from './state/action';\nimport { CodeBlock } from './CodeBlock';\nimport { getXMLErrors, parseXML, getXMLBody } from './getXMLErrors';\nimport { WebsitePreview } from './WebsitePreview';\nimport { codeFromState } from './state/code';\nimport { ChatBotState } from './state';\n\ntype TriggerProps = { value: string; steps?: any };\n\nfunction LinkToWebsite() {\n  const code = useSelector<ChatBotState, string>((state) =>\n    codeFromState(state.code)\n  );\n  const url = createWebsiteURLWithData('site', code);\n  return <a href={url}>Click hier um deine Website zu öffnen</a>;\n}\n\nexport function ProgrammingChatBot() {\n  const dispatch = useDispatch<Dispatch<ChatBotAction>>();\n  const [height, setHeight] = useState(window.innerHeight);\n  React.useEffect(() => {\n    function updateHeight() {\n      setHeight(window.innerHeight);\n    }\n    window.addEventListener('resize', updateHeight);\n    return () => window.removeEventListener('resize', updateHeight);\n  });\n\n  const steps = [\n    {\n      id: 'start',\n      message: 'Hej, ich bin Saphira 🐉 Wie heißt du? 🤗',\n      trigger: 'enter-username',\n    },\n    {\n      id: 'enter-username',\n      user: true,\n      trigger: 'ask-learn',\n    },\n    {\n      id: 'ask-learn',\n      message: (args: MessageArgs) => {\n        dispatch({ type: 'setName', value: args.previousValue });\n        return `${args.previousValue}, möchtest du lernen, wie man ganz einfach eine Homepage programmiert? 👩💻👨💻`;\n      },\n      trigger: 'select-learn',\n    },\n    {\n      id: 'select-learn',\n      options: [\n        { value: 1, label: 'Ja', trigger: 'learn-yes' },\n        { value: 2, label: 'Nein', trigger: 'learn-no' },\n      ],\n    },\n    {\n      id: 'learn-yes',\n      message: 'Super, dann legen wir direkt los! 🤩',\n      trigger: 'only-smartphone',\n    },\n    {\n      id: 'learn-no',\n      message: 'Schade. Vielleicht kann ich dich dennoch überzeugen 🤔',\n      trigger: 'only-smartphone',\n    },\n    {\n      id: 'only-smartphone',\n      message: 'Dazu brauchst du nichts weiter als dein Smartphone... 🤳',\n      trigger: 'explain-build-together',\n      delay: 2000,\n    },\n    {\n      id: 'explain-build-together',\n      message:\n        'Wir machen das so: Ich zeige dir, wie ich meine Homepage programmiere und du kannst dann in jedem Schritt deine eigene Homepage entwickeln. 🙃💪',\n      trigger: 'explain-language-basic',\n      delay: 3000,\n    },\n    {\n      id: 'explain-language-basic',\n      message:\n        'Zuerst erkläre ich dir ganz grob, wie die Sprache funktioniert. ',\n      trigger: 'explain-language-basic-tags',\n      delay: 1000,\n    },\n    {\n      id: 'explain-language-basic-tags',\n      message:\n        'Immer, wenn wir was definieren wollen, müssen wir sagen, wo es anfängt und wo es aufhört. Dafür nutzen wir Tags. 🤖',\n      trigger: 'explain-language-basic-tags-language',\n      delay: 2000,\n    },\n    {\n      id: 'explain-language-basic-tags-language',\n      message:\n        'Nein, das sind keine Wochentage. Das spricht man aus wie TÄÄG! Das ist sowas wie ein Name. Am Anfang sieht das dann so aus:',\n      trigger: 'code-explain-language-basic-tags',\n      delay: 2000,\n    },\n    {\n      id: 'code-explain-language-basic-tags',\n      trigger: 'ask-tag-input',\n      component: <CodeBlock content={`<tag>`} />,\n      asMessage: true,\n      delay: 1000,\n    },\n    {\n      id: 'ask-tag-input',\n      message:\n        'Such direkt mal die Zeichen auf deiner Tastatur und tippe <tag> selbst ein :)',\n      trigger: 'enter-tag-input',\n      delay: 1000,\n    },\n    {\n      id: 'enter-tag-input',\n      user: true,\n      trigger: (props: TriggerProps) => {\n        console.log(props.value);\n        if (props.value === '<tag>') {\n          return 'enter-tag-input-true';\n        } else {\n          return 'enter-tag-input-false';\n        }\n      },\n    },\n    //TODO über Parser lösen\n    {\n      id: 'enter-tag-input-true',\n      message: 'Das klappt ja super!',\n      trigger: 'code-explain-language-basic-close-tags',\n    },\n    {\n      id: 'enter-tag-input-false',\n      message: 'Das stimmt noch nicht ganz, versuche es nochmal!',\n      trigger: 'enter-tag-input',\n    },\n    {\n      id: 'code-explain-language-basic-close-tags',\n      message:\n        'Am Ende eines Tags müssen wir dann sagen, dass es vorbei ist. 🙅️ Das machen wir so:',\n      trigger: 'code-explain-language-basic-close-tags-code',\n      delay: 2000,\n    },\n    {\n      id: 'code-explain-language-basic-close-tags-code',\n      trigger: 'explain-slash',\n      component: <CodeBlock content={`</tag>`} />,\n      asMessage: true,\n    },\n    {\n      id: 'explain-slash',\n      message:\n        'Es ist ganz wichtig, dass wir hier den schrägen Strich nicht vergessen. Dann geht nämlich alles kaputt. 🙇 Gib es jetzt selbst ein.',\n      trigger: 'enter-slash',\n      delay: 3000,\n    },\n    {\n      id: 'enter-slash',\n      user: true,\n      trigger: (props: TriggerProps) => {\n        console.log(props.value);\n        if (props.value === '</tag>') {\n          return 'enter-slash-true';\n        } else {\n          return 'enter-slash-false';\n        }\n      },\n    },\n    //TODO: über Parser lösen\n    {\n      id: 'enter-slash-false',\n      message: 'Das stimmt noch nicht ganz, versuche es nochmal',\n      trigger: 'enter-slash',\n      delay: 1000,\n    },\n    {\n      id: 'enter-slash-true',\n      message:\n        'Sehr gut! Jetzt haben wir erstmal genug Theorie gehabt, jetzt geht es los! 💪',\n      trigger: 'hast-du-lust-loszulegen',\n      delay: 1000,\n    },\n\n    {\n      id: 'hast-du-lust-loszulegen',\n      message: 'Hast du Lust loszulegen? 😊',\n      trigger: 'hast-du-lust-loszulegen-select',\n    },\n    {\n      id: 'hast-du-lust-loszulegen-select',\n      options: [\n        { value: 1, label: 'Jawoll!', trigger: 'super-wir-starten' },\n        { value: 2, label: 'Nö', trigger: 'noch-mehr-theorie' },\n      ],\n    },\n    {\n      id: 'super-wir-starten',\n      message: 'Super!! Wir starten! 🚀',\n      trigger: 'um-auf-unserer-homepage-etwas-darzustellen',\n      delay: 1000,\n    },\n    {\n      id: 'noch-mehr-theorie',\n      message:\n        'Du willst NOCH MEHR Theorie? Nicht mit mir! Wir gehen jetzt ans Eingemachte! Es wird toll!',\n      trigger: 'um-auf-unserer-homepage-etwas-darzustellen',\n      delay: 3000,\n    },\n\n    {\n      id: 'um-auf-unserer-homepage-etwas-darzustellen',\n      message: `Um auf unserer Homepage etwas darzustellen, benötigt diese einen sogenannten Körper (im Englischen: \"Body\")`,\n      trigger: 'body-verstanden',\n    },\n\n    {\n      id: 'body-verstanden',\n      options: [\n        {\n          value: 1,\n          label: 'Verstanden!',\n          trigger: 'im-body-kompletter-inhalt',\n        },\n      ],\n    },\n\n    {\n      id: 'im-body-kompletter-inhalt',\n      message: `Im Body kannst du den kompletten Inhalt einer Homepage festlegen. 💪`,\n      trigger: 'chatbot-body-beispiel',\n      delay: 2000,\n    },\n    {\n      id: 'chatbot-body-beispiel',\n      message: `Ich mache das zum Beispiel so:`,\n      trigger: 'code-lieblingstier-body',\n      delay: 1000,\n    },\n\n    {\n      id: 'code-lieblingstier-body',\n      trigger: 'code-body-verstanden',\n      asMessage: true,\n      component: (\n        <CodeBlock\n          content={`<body>Mein Lieblingstier: Die Schildkröte</body>`}\n        />\n      ),\n    },\n\n    {\n      id: 'code-body-verstanden',\n      options: [\n        {\n          value: 1,\n          label: 'Verstanden!',\n          trigger: 'lieblingstier-website-gebaut',\n        },\n      ],\n    },\n\n    {\n      id: 'lieblingstier-website-gebaut',\n      message: `Ja, ich habe Schildkröten richtig gern. Deshalb will ich eine Webseite über Schildkröten programmiert. 🤓`,\n      trigger: 'welt-sagen-website',\n      delay: 3500,\n    },\n    {\n      id: 'welt-sagen-website',\n      message: `Weißt du schon, was du der Welt sagen möchtest?`,\n      trigger: 'select-welt-sagen',\n    },\n    {\n      id: 'select-welt-sagen',\n      options: [\n        { value: 1, label: 'Ja', trigger: 'welt-sagen-ja' },\n        { value: 2, label: 'Nein', trigger: 'welt-sagen-nein' },\n      ],\n    },\n    {\n      id: 'welt-sagen-nein',\n      message: `Hier ein paar Ideen: Ich habe auch mal eine Webseite gemacht, auf der ich meinen Eltern danke. Die haben sich sehr gefreut! Ein Freund hat auch mal eine Webseite über Fussball gemacht ⚽️`,\n      trigger: 'welt-sagen-ja',\n      delay: 4000,\n    },\n    {\n      id: 'welt-sagen-ja',\n      message: `Also schreib doch einfach mal was hin. Natürlich in einem <body>!️`,\n      trigger: 'enter-website-welt-sagen',\n      delay: 2000,\n    },\n\n    {\n      id: 'enter-website-welt-sagen',\n      user: true,\n      trigger: (args: TriggerArgs) => {\n        const xml = parseXML(args.value);\n        if (args.value === '<body>Mein Lieblingstier: Die Schildkröte</body>') {\n          return 'enter-website-welt-sagen-abschreiben';\n        }\n        const errors = getXMLErrors(xml);\n        const body = getXMLBody(xml);\n\n        if (errors) {\n          return 'enter-website-welt-sagen-error';\n        }\n\n        if (!body) {\n          return 'enter-website-welt-sagen-body';\n        }\n\n        dispatch({ type: 'setBody', value: body.innerHTML });\n        return 'enter-website-welt-sagen-korrekt';\n      },\n    },\n    {\n      id: 'enter-website-welt-sagen-error',\n      component: React.createElement((args: MessageArgs) => {\n        const errors = getXMLErrors(parseXML(args.previousValue));\n        return <div>{errors}</div>;\n      }),\n      trigger: 'enter-website-welt-sagen-error-2',\n    },\n    {\n      id: 'enter-website-welt-sagen-error-2',\n      message: \"Da ist wohl was schief gelaufen. Probier's doch noch einmal.\",\n      trigger: 'enter-website-welt-sagen',\n    },\n    {\n      id: 'enter-website-welt-sagen-abschreiben',\n      message: `Hej - nicht einfach abschreiben! 🤔️`,\n      trigger: 'enter-website-welt-sagen-abschreiben-eigener-text',\n      delay: 1000,\n    },\n    {\n      id: 'enter-website-welt-sagen-abschreiben-eigener-text',\n      message: `Schreibe deinen eigenen Text.️`,\n      trigger: 'enter-website-welt-sagen',\n      delay: 1000,\n    },\n    {\n      id: 'enter-website-welt-sagen-schreibweise',\n      message: `Achte auf die Richtige Schreibweise 🤥️`,\n      trigger: 'code-lieblingstier-body',\n      delay: 1000,\n    },\n    {\n      id: 'enter-website-welt-sagen-body',\n      message: `Denk dran, dass der Text von dem Beginn <body> sowie dem Ende </body> eingefasst wird 😮️`,\n      trigger: 'code-lieblingstier-body',\n      delay: 2000,\n    },\n    {\n      id: 'enter-website-welt-sagen-slash',\n      message: `Huch, hast du vielleicht etwas vergessen? Denke immer an den schrägen Strich \"/\" wenn du eine HTML-Anweisung wieder schließen möchtest. 🤖 ️`,\n      trigger: 'code-lieblingstier-body',\n      delay: 4000,\n    },\n    {\n      id: 'enter-website-welt-sagen-korrekt',\n      message: `Super, jetzt haben wir auch schon den Inhalt deiner Website. ️`,\n      trigger: 'ask-website-sieht-gut-aus',\n      /* TODO:\n       *hier müsste ggf. die Website dargestellt werden\n       */\n      delay: 2000,\n    },\n    {\n      id: 'ask-website-sieht-gut-aus',\n      component: <WebsitePreview />,\n      trigger: 'ask-website-sieht-gut-aus-2',\n      delay: 1000,\n    },\n    {\n      id: 'ask-website-sieht-gut-aus-2',\n      message: `Da ist sie nun deine Homepage! Gefällt sie dir? 😊`,\n      trigger: 'select-website-sieht-gut-aus',\n      delay: 1000,\n    },\n    {\n      id: 'select-website-sieht-gut-aus',\n      options: [\n        { value: 1, label: 'Ja', trigger: 'website-sieht-gut-ja' },\n        { value: 2, label: 'Nein', trigger: 'website-sieht-gut-nein' },\n      ],\n    },\n\n    {\n      id: 'website-sieht-gut-ja',\n      message: `Es sieht schon dufte aus, aber mit meiner Dicken Brille 🤶 erkenne ich bei der kleinen Schrift nichts!️`,\n      trigger: 'explain-headline-tag',\n      delay: 1000,\n    },\n    {\n      id: 'website-sieht-gut-nein',\n      message: `Das habe ich mir schon gedacht! Wir machen es jetzt noch glamoröser! 🤩️`,\n      trigger: 'explain-headline-tag',\n      delay: 1000,\n    },\n    {\n      id: 'explain-headline-tag',\n      message: `Machen wir die Zeile ganz groß! Dazu gibt es titel! Die heißen <h1>, <h2>, <h3>, <h4>, <h5>. Und es gibt sogar noch <h6>️`,\n      trigger: 'sprache-text-rechts-links',\n      delay: 2000,\n    },\n    {\n      id: 'sprache-text-rechts-links',\n      message: `Wie du ja weißt, verpackt man in dieser Sprache html den Text immer von links und rechts, also zum Beispiel so:️`,\n      trigger: 'code-sprache-text-rechts-links',\n      delay: 1500,\n    },\n\n    {\n      id: 'code-sprache-text-rechts-links',\n      trigger: 'ueberschrift-verstanden',\n      asMessage: true,\n      component: (\n        <CodeBlock content={`<h3>Hallo ich bin eine Überschrift</h3>`} />\n      ),\n    },\n\n    {\n      id: 'ueberschrift-verstanden',\n      options: [{ value: 1, label: 'Verstanden!', trigger: 'zuerst-machen' }],\n    },\n\n    {\n      id: 'zuerst-machen',\n      message: `Wenn du jetzt deine Homepage neu erstellst: Was würdest du zuerst machen?`,\n      trigger: 'select-body-headline',\n    },\n\n    {\n      id: 'select-body-headline',\n      options: [\n        { value: 1, label: '<head>', trigger: 'select-body-headline-false' },\n        { value: 2, label: '<body>', trigger: 'select-body-headline-true' },\n        { value: 3, label: '<h1>', trigger: 'select-body-headline-false' },\n      ],\n    },\n    {\n      id: 'select-body-headline-false',\n      message: `Schade! Nicht ganz korrekt. Versuche es nochmal!`,\n      trigger: 'select-body-headline',\n    },\n\n    {\n      id: 'select-body-headline-true',\n      message: `Und dann?`,\n      trigger: 'select-body-headline-true-weiter',\n    },\n\n    {\n      id: 'select-body-headline-true-weiter',\n      options: [\n        {\n          value: 1,\n          label: '<head>',\n          trigger: 'select-body-headline-headline-false',\n        },\n        {\n          value: 2,\n          label: '<h1>',\n          trigger: 'select-body-headline-headline-true',\n        },\n      ],\n    },\n    {\n      id: 'select-body-headline-headline-false',\n      message: `Fast! Bitte versuche es erneut.`,\n      trigger: 'select-body-headline-true',\n      delay: 1000,\n    },\n\n    {\n      id: 'select-body-headline-headline-true',\n      message: 'Jetzt gib deinen Titel ein',\n      trigger: 'enter-body-headline-headline-true',\n    },\n\n    {\n      id: 'enter-body-headline-headline-true',\n      user: true,\n      trigger: (args: TriggerArgs) => {\n        dispatch({ type: 'setTitle', value: args.value });\n        return 'body-headline-close';\n      },\n    },\n\n    {\n      id: 'body-headline-close',\n      message: 'Und wie geht es dann weiter?',\n      trigger: 'select-headline-close',\n    },\n\n    {\n      id: 'select-headline-close',\n      options: [\n        {\n          value: 1,\n          label: '</body>',\n          trigger: 'select-close-headline-false',\n        },\n        {\n          value: 2,\n          label: '</h1>',\n          trigger: 'select-close-headline-true',\n        },\n      ],\n    },\n    {\n      id: 'select-close-headline-false',\n      message: `Fast! Bitte versuche es erneut.`,\n      trigger: 'select-headline-close',\n      delay: 1000,\n    },\n\n    {\n      id: 'select-close-headline-true',\n      message: 'Und dann?',\n      trigger: 'select-body-close',\n    },\n    {\n      id: 'select-body-close',\n      options: [\n        {\n          value: 1,\n          label: '</body>',\n          trigger: 'select-body-close-true',\n        },\n        {\n          value: 2,\n          label: '</head>',\n          trigger: 'select-body-close-false',\n        },\n      ],\n    },\n    {\n      id: 'select-body-close-false',\n      message: `Fast! Bitte versuche es erneut.`,\n      trigger: 'select-body-close',\n    },\n    {\n      id: 'select-body-close-true',\n      trigger: 'sieht-ziemlich-cool-aus',\n      component: <WebsitePreview />,\n    },\n    {\n      id: 'sieht-ziemlich-cool-aus',\n      message: `Das ist doch schon mal ziemlich cool. 😎 Aber es ist schon ein bisschen langweilig, dass das alles in schwarz ist. `,\n      trigger: 'gruene-ueberschrift',\n      delay: 3000,\n    },\n    {\n      id: 'gruene-ueberschrift',\n      message:\n        'Meine Lieblingsfarbe ist ja grün. Deshalb will ich meine Überschrift in grün haben. 😍 Dafür muss ich bei der Überschrift sagen, dass sie grün sein soll. 🎨',\n      trigger: 'gruene-ueberschrift-so',\n      delay: 3000,\n    },\n\n    {\n      id: 'gruene-ueberschrift-so',\n      message: 'Das mache ich durch:',\n      trigger: 'gruene-ueberschrift-code',\n    },\n\n    {\n      id: 'gruene-ueberschrift-code',\n      component: (\n        <CodeBlock\n          content={`<h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte</h1>`}\n        />\n      ),\n      asMessage: true,\n      trigger: 'gruene-ueberschrift-verstanden',\n    },\n\n    {\n      id: 'gruene-ueberschrift-verstanden',\n      options: [\n        {\n          value: 1,\n          label: 'Weiter!',\n          trigger: 'gruene-ueberschrift-gesamt-code-ueberleitung',\n        },\n      ],\n    },\n\n    {\n      id: 'gruene-ueberschrift-gesamt-code-ueberleitung',\n      message: '👨💻 Insgesamt sieht mein Code jetzt so aus:',\n      trigger: 'gruene-ueberschrift-gesamt-code',\n    },\n\n    {\n      id: 'gruene-ueberschrift-gesamt-code',\n      component: (\n        <CodeBlock\n          content={`<CodeBlock content={<body><h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte<Botname></h1></body>}/>`}\n        />\n      ),\n      asMessage: true,\n      trigger: 'andere-farben',\n    },\n\n    {\n      id: 'andere-farben',\n      message:\n        'Hinter color= kannst du verschiedene Farben auf Englisch eintragen. Vergiss das Istgleichzeichen nicht!',\n      trigger: 'andere-farben-verstanden',\n    },\n\n    {\n      id: 'andere-farben-verstanden',\n      options: [{ value: 1, label: 'Verstanden!', trigger: 'fabe-definieren' }],\n    },\n\n    {\n      id: 'fabe-definieren',\n      message: 'Wie würde ich denn die Überschrift rot machen?',\n      trigger: 'select-rote-schrift',\n    },\n\n    {\n      id: 'select-rote-schrift',\n      options: [\n        {\n          value: 1,\n          label: '<h1 style=\"color=red;\">',\n          trigger: 'farbe-waehlen',\n        },\n        {\n          value: 2,\n          label: '<h1 style=\"Farbe=rot;\">',\n          trigger: 'fehler-farbige-ueberschrift',\n        },\n        {\n          value: 3,\n          label: '<h1 style=\"color=blue;\">',\n          trigger: 'fehler-farbige-ueberschrift',\n        },\n      ],\n    },\n\n    {\n      id: 'fehler-farbige-ueberschrift',\n      message: 'Ups, das war leider falsch! Versuche es nochmal!',\n      trigger: 'select-rote-schrift',\n    },\n\n    {\n      id: 'farbe-waehlen',\n      message: 'Welche Farbe soll deine Überschrift haben?',\n      trigger: 'select-farbe-ueberschrift',\n    },\n\n    {\n      id: 'select-farbe-ueberschrift',\n      options: [\n        {\n          value: 1,\n          label: 'rot',\n          trigger: () => {\n            dispatch({ type: 'setTitleColor', value: 'red' });\n            return 'farbige-ueberschrift-super';\n          },\n        },\n        {\n          value: 2,\n          label: 'gelb',\n          trigger: () => {\n            dispatch({ type: 'setTitleColor', value: 'yellow' });\n            return 'farbige-ueberschrift-super';\n          },\n        },\n        {\n          value: 3,\n          label: 'blau',\n          trigger: () => {\n            dispatch({ type: 'setTitleColor', value: 'blue' });\n            return 'farbige-ueberschrift-super';\n          },\n        },\n      ],\n      /*\n       *TODO: hier dann die gewählte Farbe in den Code rein schreiben außerdem sollte hier dann noch in den Code der Text aus der Überschrift rein von oben und alle closing tags\n       * TODO: dann noch die homepage anzeigen?\n       */\n    },\n\n    {\n      id: 'farbige-ueberschrift-super',\n      component: (\n        <div>\n          <CodeBlock />\n          <br />\n          <WebsitePreview />\n        </div>\n      ),\n      trigger: 'farbige-ueberschrift-super-2',\n    },\n\n    {\n      id: 'farbige-ueberschrift-super-2',\n      message: 'Das sieht ja schon richtig cool aus!',\n      trigger: 'inhalt-erstellen',\n    },\n\n    {\n      id: 'inhalt-erstellen',\n      message:\n        'Jetzt wollen wir aber noch die Webseite mit Inhalt füllen. Bis jetzt haben wir ja bloß die Überschrift.',\n      trigger: 'inhalt-schildkroete',\n    },\n\n    {\n      id: 'inhalt-schildkroete',\n      message:\n        'Dafür schreiben wir das hinter die Überschrift. Auf meiner Webseite über Schildkröten sah das damals so aus:',\n      trigger: 'inhalt-schildkroete',\n    },\n\n    {\n      id: 'inhalt-schildkroete',\n      component: (\n        <CodeBlock\n          content={`<body>\n      <h1 style=\"color=green;\">Mein Lieblingstier: Die Schildkröte</h1>\n      \n      Es gibt auf der ganzen Welt derzeit 341 verscheidene Schildkrötenarten.\n      Es gibt Landschildkrötenarten und kleine Wasserschildkröten und auch große\n      Fluss-Schildkröten in Südamerika und sogar Riesenschildkröten.\n      \n      </body>`}\n        />\n      ),\n      trigger: 'inhalt-selbst-schreiben',\n    },\n\n    {\n      id: 'inhalt-selbst-schreiben',\n      message:\n        'Jetzt kanns du deinen Inhalt passend zu deinem Titel schreiben. Die Überschrift von eben habe ich mir gemerkt und füge sie zu deinem Inhalt dazu.',\n      trigger: 'enter-inhalt',\n    },\n\n    /*\n     * Hier muss dann nochmal der Code von vorher eingefügt werden, damit der User nur noch seinen Text eingeben muss\n     */\n\n    {\n      id: 'enter-inhalt',\n      user: true,\n      trigger: (args: TriggerArgs) => {\n        dispatch({ type: 'setBody', value: args.value });\n        return 'hp-fertig';\n      },\n    },\n\n    {\n      id: 'hp-fertig',\n      message: 'Und schon ist deine erste eigene Homepage fertig! 😲👏',\n      trigger: 'finaler-link',\n    },\n\n    {\n      id: 'finaler-link',\n      message: 'Schau gleich hier: ',\n      trigger: 'link to website',\n    },\n    {\n      id: 'link to website',\n      component: <LinkToWebsite />,\n      end: true,\n    },\n  ];\n\n  if (height <= 750) {\n    return <ChatBot width=\"100%\" steps={steps} floating={true} opened={true} />;\n  }\n\n  return (\n    <div\n      style={{\n        backgroundColor: 'gray',\n        width: '100%',\n        minHeight: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignSelf: 'center',\n        }}\n      >\n        <div style={{ flex: 1 }} />\n        <p\n          style={{\n            textAlign: 'center',\n            fontWeight: 'bold',\n            color: 'white',\n            fontSize: 25,\n          }}\n        >\n          Saphira\n        </p>\n        <div>\n          <ChatBot steps={steps} />\n        </div>\n        <div style={{ flex: 1 }} />\n      </div>\n    </div>\n  );\n}\n","export function getUrlVars() {\n  var vars: { [key: string]: string } = {};\n  window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (\n    m,\n    key,\n    value\n  ) {\n    vars[key] = decodeURI(value);\n    return '';\n  });\n  return vars;\n}\n\nexport function createWebsiteURLWithData(key: string, data: string) {\n  return encodeURI(window.location.href + `/?${key}=${data}`);\n}\n","import { ChatBotAction } from './action';\n\nconst defaultProfileState = {\n  name: undefined as undefined | string,\n  age: undefined as undefined | number,\n  url: undefined as undefined | string,\n};\n\nexport function profileReducer(\n  state = defaultProfileState,\n  action: ChatBotAction\n) {\n  switch (action.type) {\n    case 'setAge':\n      state = { ...state, age: action.value };\n      break;\n    case 'setName':\n      state = { ...state, name: action.value };\n      break;\n    case 'setURL':\n      state = { ...state, url: action.value };\n      break;\n  }\n  return state;\n}\n","import { combineReducers } from 'redux';\nimport { profileReducer } from './profile';\nimport { codeReducer } from './code';\n\nexport const chatBotReducer = combineReducers({\n  profile: profileReducer,\n  code: codeReducer,\n});\n\nexport type ChatBotState = NonNullable<Parameters<typeof chatBotReducer>[0]>;\n","import React from 'react';\nimport './App.css';\nimport { ProgrammingChatBot } from './Chat';\nimport { getUrlVars } from './urlArgs';\nimport { createStore } from 'redux';\nimport { chatBotReducer } from './state';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  // display custom site if site argument passed to url\n  const args = getUrlVars();\n  if (args['site']) {\n    return (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: args['site'],\n        }}\n      />\n    );\n  }\n\n  const store = createStore(chatBotReducer);\n\n  return (\n    <Provider store={store}>\n      <ProgrammingChatBot />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}